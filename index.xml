<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>黄友亮的博客</title><link>http://butterbright.cc/</link><description>这是我的全新 Hugo 网站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 05 Jan 2023 23:03:49 +0000</lastBuildDate><atom:link href="http://butterbright.cc/index.xml" rel="self" type="application/rss+xml"/><item><title>cmu15445-日志</title><link>http://butterbright.cc/cmu15445-%E6%97%A5%E5%BF%97/</link><pubDate>Thu, 05 Jan 2023 23:03:49 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E6%97%A5%E5%BF%97/</guid><description>DBMS 需要保证 如果事务终止，不存在部分的改变 如果事务提交，所有的修改应该能够持久化 通过 undo 保证前者，通过 redo 保证后者 buffer pool policies Force 事务提交时修改必须落盘 No-Steal 事务提交前修改不能落盘 shadow paging 保留 master 和 shadow 两个版本，master 保留已经提交事务的修改，shadow 保存未</description></item><item><title>随笔</title><link>http://butterbright.cc/%E9%9A%8F%E7%AC%94/</link><pubDate>Tue, 27 Dec 2022 21:07:17 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/%E9%9A%8F%E7%AC%94/</guid><description>Uncharted 4 神秘海域作为我买来 ps5 第一个通关的游戏，其实给我带来的体验并没有完全达到预期，甚至中途迷路的时候短暂的出现了 3d 眩晕让我一度失去了继续玩下去的动力。游戏的交互主要由攀岩、跳跃、射击和小部分解谜构成，操作上的单一性导致游戏在后期给我的新鲜感逐</description></item><item><title>cmu15445-多版本并发控制</title><link>http://butterbright.cc/cmu15445-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><pubDate>Sun, 18 Dec 2022 21:45:54 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid><description>读不会阻塞写，写也不会阻塞读。 只读事务可以读到连续的快照并用时间戳决定可见性。 支持 time-travel 查询。 MVCC SI write skew anomaly design decisions concurrency control 2pl occ t/o version storage 使用版本链存储不同的版本。 append-only new to old 不需要遍历查找最新版本，但每次更新 tuple 都要更新索引指针 old to new 与 new to old 相反 time-travel main table 存放最新值，</description></item><item><title>cmu15445-时间戳排序并发控制</title><link>http://butterbright.cc/cmu15445-%E6%97%B6%E9%97%B4%E6%88%B3%E6%8E%92%E5%BA%8F%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><pubDate>Sat, 17 Dec 2022 21:32:44 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E6%97%B6%E9%97%B4%E6%88%B3%E6%8E%92%E5%BA%8F%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid><description>T/O 时间戳的分发有三种方式 系统时间(物理时间) 逻辑时间 以上两种混合 每个对象被 W-TS(X)和 R-TS(X)标记，用于标记最后一个写/读这个对象的时间戳。 对于事务的每次操作，如果它处理了一个来自“未来”的对象，则终止这个事务并重新开始。 reads TS(T) &amp;lt; W</description></item><item><title>cmu15445-两阶段锁并发控制</title><link>http://butterbright.cc/cmu15445-%E4%B8%A4%E9%98%B6%E6%AE%B5%E9%94%81%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><pubDate>Sat, 26 Nov 2022 21:01:59 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E4%B8%A4%E9%98%B6%E6%AE%B5%E9%94%81%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid><description>locks 执行过程 事务申请或升级锁 lock manager 同意或拒绝 事务释放锁 lock manager 更新 lock table，记录哪些事务持有什么锁以及哪些事务正在等待锁 锁的类型 共享锁 互斥锁 two phase locking 每一个事务可分为扩张阶段和收缩阶段 扩张阶段：只能进行锁的申请 收缩阶段：只能进行锁的释放 cascading aborts 两阶段锁</description></item><item><title>cmu15445-并发控制原理</title><link>http://butterbright.cc/cmu15445-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 26 Nov 2022 15:20:55 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86/</guid><description>transactions 定义 对于数据库执行的一系列读写操作，是改变数据库的基本单元。 正确性标准 原子性：所有操作要么全部成功，要么全部失败 一致性：事务执行后最终的结果是正确的 隔离性：不同事务间是独立执行的 持久性：只要事务提交了，结果便可以持久生效 atomicity logging 记录所有终止事</description></item><item><title>cmu15445-查询计划与优化</title><link>http://butterbright.cc/cmu15445-%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92%E4%B8%8E%E4%BC%98%E5%8C%96/</link><pubDate>Thu, 17 Nov 2022 21:53:10 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92%E4%B8%8E%E4%BC%98%E5%8C%96/</guid><description>architecture logical plan vs physical plan(?) heuristics optimization selection 尽早地执行过滤 对谓词重新排序，优先执行区分度高的 分解谓词并下推 projection 尽早地执行投影操作，需要保留一些字段，比如用来连接地属性。 others 去除不可能或不必要的谓词，谓词合并等。 plan cost estimation statistics DBMS 存储了关于表、属性和索引的统计信息。 对于关系 R，D</description></item><item><title>cmu15445-查询执行</title><link>http://butterbright.cc/cmu15445-%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C/</link><pubDate>Wed, 16 Nov 2022 22:24:16 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8C/</guid><description>processing model iterator model 实现了 next 函数，每个算子通过 next 从它的孩子获取 tuple，并进行进一步的处理 每次调用，返回一个 tuple 或 null tuple breaker: join,subquery,order by 会使 pipeline 阻塞，因为它们需要全部的数据 materialization model 一次性返回全部结果 可以提供额外的信息从而避免扫描过多的 tuples 返回值可以是行也可以是列 适用于 OL</description></item><item><title>cmu15445-连接算法</title><link>http://butterbright.cc/cmu15445-%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 15 Nov 2022 21:33:32 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95/</guid><description>join 算子输出 取决于执行、存储模型和查询本身 可以返回整个 tuple，也可以只返回 record id 连接算法 nested loop join stupid nested loop join io次数：M+(m*N) block nested loop join io次数：M+(M/B*N) index nested loop join io次数：M+(m*C) sort-merge join outer table 可能需要回溯 io 次数：排序+合并,合并次</description></item><item><title>cmu15445-排序与聚集</title><link>http://butterbright.cc/cmu15445-%E6%8E%92%E5%BA%8F%E4%B8%8E%E8%81%9A%E9%9B%86/</link><pubDate>Tue, 15 Nov 2022 14:59:30 +0000</pubDate><author>ButterBright</author><guid>http://butterbright.cc/cmu15445-%E6%8E%92%E5%BA%8F%E4%B8%8E%E8%81%9A%E9%9B%86/</guid><description>query plan 算子按照树形结构组织 数据从叶子结点流向根结点 根节点输出最终的查询结果 不能假设查询结果都能放在内存当中，需要借助 buffer pool，并尽可能使用顺序 io external merge sort 为什么要排序？ 加速去重(distinct) 加速聚集(group by) 构建 b+树索引更加高效 2-way buffer</description></item></channel></rss>